{"version":3,"sources":["redux/actions/actionTypes.js","components/CardCreator/CardCreator.js","redux/actions/cardActions.js","components/Card/CardItem.js","components/CardsList/CardsList.js","components/EditModal/EditModal.js","App.js","reportWebVitals.js","redux/reducers/cardReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["ADD_CARD","TOGGLE_MODAL","ACTIVE_CARD","COMPLETED_BUTTON","UNDO_COMPLETED_BUTTON","EDIT_BUTTON","UPDATE_BUTTON","DELETE_BUTTON","CardCreator","dispatch","useDispatch","useState","title","setTitle","content","setContent","Fragment","TextField","id","label","margin","value","onChange","event","target","multiline","rows","fullWidth","variant","Button","color","onClick","type","actionTypes","payload","CardItem","props","Card","style","flexGrow","CardContent","Typography","component","card","whiteSpace","CardActions","disableSpacing","justifyContent","listName","IconButton","aria-label","index","itemNo","CardsList","List","overflowY","cards","map","ListItem","EditModal","openModal","useSelector","state","cardReducer","activeCard","theCardElementFromTheArray","activeCardsList","completedCardsList","whatList","updatedTitle","setUpdatedTitle","updatedContent","setUpdatedContent","handleCloseModal","useEffect","Dialog","open","onClose","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","DialogTitle","DialogContent","DialogActions","status","App","Container","Grid","container","spacing","item","md","sm","xs","align","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","slice","length","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"0SAAaA,EAAW,WACXC,EAAe,eACfC,EAAc,cACdC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAc,cACdC,EAAgB,gBAChBC,EAAgB,gBC6CdC,EA/CK,WAEnB,IAAMC,EAAWC,cAFQ,EAGCC,mBAAS,IAHV,mBAGlBC,EAHkB,KAGXC,EAHW,OAIKF,mBAAS,IAJd,mBAIlBG,EAJkB,KAITC,EAJS,KAsBzB,OACC,eAAC,IAAMC,SAAP,WACC,8BACC,cAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,QAAQC,OAAO,SAASC,MAAOT,EAAOU,SAnBpD,SAACC,GAC1BV,EAASU,EAAMC,OAAOH,YAoBrB,8BACC,cAACJ,EAAA,EAAD,CACCC,GAAG,4BACHC,MAAM,UACNM,WAAS,EACTC,KAAM,EACNC,WAAS,EACTN,MAAOP,EACPc,QAAQ,WACRR,OAAO,SACPE,SA3BwB,SAACC,GAC5BR,EAAWQ,EAAMC,OAAOH,YA6BvB,8BACC,cAACQ,EAAA,EAAD,CAAQD,QAAQ,YAAYE,MAAM,YAAYC,QA3B3B,YACjBnB,GAASE,KACZL,EClBQ,CACHuB,KAAMC,EACNC,QDgBY,CAAEtB,QAAOE,aAC1BD,EAAS,IACTE,EAAW,MAuBV,yB,0HEsCWoB,EA3EE,SAACC,GAEjB,IAAM3B,EAAWC,cA8BjB,OACC,eAAC2B,EAAA,EAAD,CAAMC,MAAO,CAACC,SAAU,GAAxB,UACC,eAACC,EAAA,EAAD,WAEC,cAACC,EAAA,EAAD,CAAYb,QAAQ,KAAKc,UAAU,KAAnC,SACEN,EAAMO,KAAK/B,QAIb,cAAC6B,EAAA,EAAD,CAAYb,QAAQ,QAAQc,UAAU,IAAIJ,MAAO,CAACM,WAAY,YAA9D,SACER,EAAMO,KAAK7B,aAKd,eAAC+B,EAAA,EAAD,CAAaC,gBAAc,EAACR,MAAO,CAACS,eAAe,YAAnD,UAEqB,WAAnBX,EAAMY,SAEL,cAACC,EAAA,EAAD,CAAYC,aAAW,YAAYnB,QA/CV,WDSA,IAACG,ECR9BzB,GDQ8ByB,ECRL,CACxBiB,MAAOf,EAAMgB,QDQL,CACHpB,KAAMC,EACNC,QAASA,MCmCX,SACC,cAAC,IAAD,MAKD,cAACe,EAAA,EAAD,CAAYC,aAAW,YAAYnB,QA/CZ,WDUM,IAACG,ECTlCzB,GDSkCyB,ECTL,CAC5BiB,MAAOf,EAAMgB,QDSL,CACHpB,KAAMC,EACNC,QAASA,MCkCX,SACC,cAAC,IAAD,MAKH,cAACe,EAAA,EAAD,CAAYC,aAAW,OAAOnB,QA/CR,WDWA,IAACG,ECVzBzB,GDUyByB,ECVL,CACnBiB,MAAOf,EAAMgB,OACbJ,SAAUZ,EAAMY,UDSR,CACHhB,KAAMC,EACNC,QAASA,MCiCb,SACC,cAAC,IAAD,MAGD,cAACe,EAAA,EAAD,CAAYC,aAAW,SAASnB,QA3CR,WDiBA,IAACG,EChB3BzB,GDgB2ByB,EChBL,CACrBc,SAAUZ,EAAMY,SAChBG,MAAOf,EAAMgB,QDeL,CACHpB,KAAMC,EACNC,QAASA,MCuBb,SACC,cAAC,IAAD,aCxDUmB,EAjBG,SAACjB,GAUlB,OACC,cAACkB,EAAA,EAAD,CAAMhB,MAAO,CAACiB,UAAW,OAAS,OAAU,SAA5C,SAPCnB,EAAMoB,MACLpB,EAAMoB,MAAMC,KAAI,SAACd,EAAMQ,GAAP,OAAiB,cAACO,EAAA,EAAD,UAAwC,cAAC,EAAD,CAAUf,KAAMA,EAAMS,OAAQD,EAAOH,SAAUZ,EAAMY,UAArD,cAA2EG,KAApGf,EAAMY,SAAWG,MAC7D,M,4CCmFOQ,EAxFG,WAEjB,IAAMC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYH,aACnDI,EAAaH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,cAUtDC,EAA6BJ,aAAY,SAAAC,GAAK,OARjC,SAACA,GACjB,MAA4B,WAAxBE,EAAWhB,SACPc,EAAMC,YAAYG,gBAAgBF,EAAWb,OACpB,cAAxBa,EAAWhB,SACZc,EAAMC,YAAYI,mBAAmBH,EAAWb,OAC5C,KAGyCiB,CAASN,MAbxC,EAeiBnD,mBAAS,IAf1B,mBAehB0D,EAfgB,KAeFC,EAfE,OAgBqB3D,mBAAS,IAhB9B,mBAgBhB4D,EAhBgB,KAgBAC,EAhBA,KAkBjB/D,EAAWC,cAEX+D,EAAmB,WACxBhE,EHhBS,CACHuB,KAAMC,IGgBZxB,EHXS,CACHuB,KAAMC,EACNC,QGSiB,MA8BxB,OAZAwC,qBAAU,WACLT,GACHK,EAAgBL,EAA2BrD,OAC3C4D,EAAkBP,EAA2BnD,WAG7CwD,EAAgB,IAChBE,EAAkB,OAElB,CAACP,IAIF,eAACU,EAAA,EAAD,CACCC,KAAMhB,EACNiB,QAASJ,EACTK,kBAAgB,yBAChBC,mBAAiB,+BACjBC,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CAAEC,QAAS,KAP3B,UASC,cAACC,EAAA,EAAD,CAAanE,GAAG,oBAAhB,uBACA,eAACoE,EAAA,EAAD,WACC,8BACC,cAACrE,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,QAAQC,OAAO,SAASC,MAAOgD,EAAc/C,SAAU,SAAAC,GAAW+C,EAAgB/C,EAAMC,OAAOH,YAErI,8BACC,cAACJ,EAAA,EAAD,CACCC,GAAG,4BACHC,MAAM,UACNM,WAAS,EACTC,KAAM,EACNL,MAAOkD,EACP3C,QAAQ,WACRR,OAAO,SACPE,SAAU,SAAAC,GAAWiD,EAAkBjD,EAAMC,OAAOH,eAIvD,eAACkE,EAAA,EAAD,WACC,cAAC1D,EAAA,EAAD,CAAQE,QAxDU,WHaM,IAACG,EGX3BzB,GHW2ByB,EGXL,CACrBiB,MAAOa,EAAWb,MAClBqC,OAAQxB,EAAWhB,SACnBpC,MAAOyD,EACPvD,QAASyD,GHQD,CACHvC,KAAMC,EACNC,QAASA,KGPfoC,EAAgB,IAChBE,EAAkB,IAElBC,KA4CiC3C,MAAM,UAArC,oBACA,cAACD,EAAA,EAAD,CAAQE,QAAS0C,EAAkB3C,MAAM,UAAzC,0BCnDW2D,MA5Bf,WAEC,IAAMvB,EAAkBL,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYG,mBACzDC,EAAqBN,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYI,sBAElE,OACC,eAAC,IAAMnD,SAAP,WACC,cAAC,EAAD,IACA,cAAC0E,EAAA,EAAD,UACC,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACC,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,EAACC,GAAI,EAAGC,GAAI,GAAzB,UACC,cAACxD,EAAA,EAAD,CAAYyD,MAAM,SAASpE,MAAM,cAAcF,QAAQ,SAASuE,QAAQ,QAAxE,uBACA,cAAC,EAAD,OAED,eAACR,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,EAACC,GAAI,EAAGC,GAAI,GAAzB,UACC,cAACxD,EAAA,EAAD,CAAYyD,MAAM,SAASpE,MAAM,cAAcF,QAAQ,KAAvD,2BACA,cAAC,EAAD,CAAW4B,MAAOU,EAAiBlB,SAAS,cAE7C,eAAC2C,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,EAACC,GAAI,EAAGC,GAAI,GAAzB,UACC,cAACxD,EAAA,EAAD,CAAYyD,MAAM,SAASpE,MAAM,cAAcF,QAAQ,KAAvD,8BACA,cAAC,EAAD,CAAW4B,MAAOW,EAAoBnB,SAAS,0BChBtCoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCLRQ,EAAY,CACjB3C,gBAAiB,GACjBC,mBAAoB,GACpBP,WAAW,EACXI,WAAY,CAAEb,MAAO,GAAIH,SAAU,KAuHrBe,EApHK,WAAgC,IAA/BD,EAA8B,uDAAtB+C,EAAWC,EAAW,uCAClD,OAAQA,EAAO9E,MACd,KAAKC,EACJ,OAAO,2BACH6B,GADJ,IAECI,gBAAgB,GAAD,mBAAMJ,EAAMI,iBAAZ,CACf,CACCtD,MAAOkG,EAAO5E,QAAQtB,MACtBE,QAASgG,EAAO5E,QAAQpB,QACxB0E,OAAQ,cAIX,KAAKvD,EACJ,OAAO,2BACH6B,GADJ,IAECF,WAAYE,EAAMF,YAEpB,KAAK3B,EACJ,OAAO,2BACH6B,GADJ,IAECE,WAAW,2BACPF,EAAME,YADA,IAETb,MAAO2D,EAAO5E,QAAQiB,MACtBH,SAAU8D,EAAO5E,QAAQc,aAI5B,KAAKf,EACJ,OAAO,2BACH6B,GADJ,IAECK,mBAAmB,GAAD,mBACdL,EAAMK,oBADQ,CAEjBL,EAAMI,gBAAgB4C,EAAO5E,QAAQiB,SAEtCe,gBAAgB,GAAD,mBACXJ,EAAMI,gBAAgB6C,MAAM,EAAGD,EAAO5E,QAAQiB,QADnC,YAEXW,EAAMI,gBAAgB6C,MAAMD,EAAO5E,QAAQiB,MAAQ,OAGzD,KAAKlB,EACJ,OAAO,2BACH6B,GADJ,IAECI,gBAAgB,GAAD,mBACXJ,EAAMI,iBADK,CAEdJ,EAAMK,mBAAmB2C,EAAO5E,QAAQiB,SAEzCgB,mBAAmB,GAAD,mBACdL,EAAMK,mBAAmB4C,MAAM,EAAGD,EAAO5E,QAAQiB,QADnC,YAEdW,EAAMK,mBAAmB4C,MAAMD,EAAO5E,QAAQiB,MAAQ,OAG5D,KAAKlB,EACJ,OAAO,2BACH6B,GADJ,IAECE,WAAY8C,EAAO5E,QACnB0B,WAAYE,EAAMF,YAEpB,KAAK3B,EACJ,MAA8B,WAA1B6E,EAAO5E,QAAQsD,OACX,2BACH1B,GADJ,IAECI,gBAAiBJ,EAAMI,gBAAgBT,KAAI,SAACd,EAAMQ,GACjD,OAAIA,IAAU2D,EAAO5E,QAAQiB,MACrB,2BACHR,GADJ,IAEC/B,MAAOkG,EAAO5E,QAAQtB,MACtBE,QAASgG,EAAO5E,QAAQpB,UAGnB6B,OAGyB,cAA1BmE,EAAO5E,QAAQsD,OAChB,2BACH1B,GADJ,IAECK,mBAAoBL,EAAMK,mBAAmBV,KAAI,SAACd,EAAMQ,GACvD,OAAIA,IAAU2D,EAAO5E,QAAQiB,MACrB,2BACHR,GADJ,IAEC/B,MAAOkG,EAAO5E,QAAQtB,MACtBE,QAASgG,EAAO5E,QAAQpB,UAGnB6B,OAIT,eACImB,GAEN,KAAK7B,EACJ,MAAgC,WAA5B6E,EAAO5E,QAAQc,UAAyBc,EAAMI,gBAAgB8C,QAAU,EACpE,2BACHlD,GADJ,IAECI,gBAAgB,GAAD,mBACXJ,EAAMI,gBAAgB6C,MAAM,EAAGD,EAAO5E,QAAQiB,QADnC,YAEXW,EAAMI,gBAAgB6C,MAAMD,EAAO5E,QAAQiB,MAAQ,OAIpB,cAA5B2D,EAAO5E,QAAQc,UAA4Bc,EAAMK,mBAAmB6C,QAAU,EAC/E,2BACHlD,GADJ,IAECK,mBAAmB,GAAD,mBACdL,EAAMK,mBAAmB4C,MAAM,EAAGD,EAAO5E,QAAQiB,QADnC,YAEdW,EAAMK,mBAAmB4C,MAAMD,EAAO5E,QAAQiB,MAAQ,OAIhDW,EACb,QACC,OAAOA,ICtHKmD,4BAAgB,CAAElD,gB,kBCQlBmD,GANDC,sBACbC,EAAaC,+BACZC,0BAAgBC,QCClBC,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,SAM1BvB,M","file":"static/js/main.8dec5e9c.chunk.js","sourcesContent":["export const ADD_CARD = 'ADD_CARD';\r\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';\r\nexport const ACTIVE_CARD = 'ACTIVE_CARD';\r\nexport const COMPLETED_BUTTON = 'COMPLETED_BUTTON';\r\nexport const UNDO_COMPLETED_BUTTON = 'UNDO_COMPLETED_BUTTON';\r\nexport const EDIT_BUTTON = 'EDIT_BUTTON';\r\nexport const UPDATE_BUTTON = 'UPDATE_BUTTON';\r\nexport const DELETE_BUTTON = 'DELETE_BUTTON';","import { Button, TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addCard } from '../../redux/actions/cardActions';\r\n\r\nconst CardCreator = () => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst [title, setTitle] = useState('');\r\n\tconst [content, setContent] = useState('');\r\n\r\n\tconst handleChangeTitle = (event) => {\r\n\t\tsetTitle(event.target.value)\r\n\t}\r\n\r\n\tconst handleChangeContent = (event) => {\r\n\t\tsetContent(event.target.value)\r\n\t}\r\n\r\n\tconst handleAddCard = () => {\r\n\t\tif (title || content) {\r\n\t\t\tdispatch(addCard({ title, content }))\r\n\t\t\tsetTitle('');\r\n\t\t\tsetContent('')\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div>\r\n\t\t\t\t<TextField id='standard-basic' label='Title' margin='normal' value={title} onChange={handleChangeTitle} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"outlined-multiline-static\"\r\n\t\t\t\t\tlabel=\"Content\"\r\n\t\t\t\t\tmultiline\r\n\t\t\t\t\trows={4}\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tvalue={content}\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\tonChange={handleChangeContent}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={handleAddCard}>Add +</Button>\r\n\t\t\t</div>\r\n\t\t</React.Fragment >\r\n\t)\r\n}\r\n\r\nexport default CardCreator;","import * as actionTypes from './actionTypes';\r\n\r\nexport const addCard = (payload) => {\r\n    return {\r\n        type: actionTypes.ADD_CARD,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const toggleModal = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_MODAL\r\n    }\r\n}\r\n\r\nexport const setActiveCard = (payload) => {\r\n    return {\r\n        type: actionTypes.ACTIVE_CARD,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const completedButton = (payload) => {\r\n    return {\r\n        type: actionTypes.COMPLETED_BUTTON,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const undoCompletedButton = (payload) => {\r\n    return {\r\n        type: actionTypes.UNDO_COMPLETED_BUTTON,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const editButton = (payload) => {\r\n    return {\r\n        type: actionTypes.EDIT_BUTTON,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const updateButton = (payload) => {\r\n    return {\r\n        type: actionTypes.UPDATE_BUTTON,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const deleteButton = (payload) => {\r\n    return {\r\n        type: actionTypes.DELETE_BUTTON,\r\n        payload: payload\r\n    }\r\n}","import { Card, CardContent, IconButton, Typography, CardActions } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { completedButton, deleteButton, editButton, undoCompletedButton } from '../../redux/actions/cardActions';\r\n\r\nconst CardItem = (props) => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleCompletedButton = () => {\r\n\t\tdispatch(completedButton({\r\n\t\t\tindex: props.itemNo\r\n\t\t}))\r\n\t}\r\n\r\n\tconst handleUndoCompleted = () => {\r\n\t\tdispatch(undoCompletedButton({\r\n\t\t\tindex: props.itemNo\r\n\t\t}))\r\n\t}\r\n\r\n\tconst handleEditButton = () => {\r\n\t\tdispatch(editButton({\r\n\t\t\tindex: props.itemNo,\r\n\t\t\tlistName: props.listName\r\n\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tconst handleDeleteButton = () => {\r\n\t\tdispatch(deleteButton({\r\n\t\t\tlistName: props.listName,\r\n\t\t\tindex: props.itemNo\r\n\t\t})\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card style={{flexGrow: 1}}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t{/* TITLE */}\r\n\t\t\t\t<Typography variant=\"h5\" component=\"h2\">\r\n\t\t\t\t\t{props.card.title}\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t{/* CONTENT */}\r\n\t\t\t\t<Typography variant=\"body2\" component=\"p\" style={{whiteSpace: 'pre-line'}}>\r\n\t\t\t\t\t{props.card.content}\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\r\n\t\t\t{/* BUTTONS */}\r\n\t\t\t<CardActions disableSpacing style={{justifyContent:\"flex-end\"}}>\r\n\t\t\t\t{\r\n\t\t\t\t\tprops.listName === 'active' ?\r\n\r\n\t\t\t\t\t\t<IconButton aria-label=\"completed\" onClick={handleCompletedButton}>\r\n\t\t\t\t\t\t\t<CheckCircleIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\r\n\t\t\t\t\t\t:\r\n\r\n\t\t\t\t\t\t<IconButton aria-label=\"completed\" onClick={handleUndoCompleted}>\r\n\t\t\t\t\t\t\t<UndoIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t<IconButton aria-label=\"edit\" onClick={handleEditButton}>\r\n\t\t\t\t\t<CreateIcon />\r\n\t\t\t\t</IconButton>\r\n\r\n\t\t\t\t<IconButton aria-label=\"delete\" onClick={handleDeleteButton} >\r\n\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</CardActions>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default CardItem;","import { List, ListItem } from '@material-ui/core';\r\nimport React from 'react';\r\nimport CardItem from '../Card/CardItem';\r\n\r\nconst CardsList = (props) => {\r\n\r\n\tfunction render() {\r\n\t\treturn (\r\n\t\t\tprops.cards ?\r\n\t\t\t\tprops.cards.map((card, index) => <ListItem key={props.listName + index} ><CardItem card={card} itemNo={index} listName={props.listName} key={`card${index}`}/></ListItem>\r\n\t\t\t\t) : ''\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<List style={{overflowY: 'auto' , 'height': '100vh'}}>\r\n\t\t\t{render()}\r\n\t\t</List>\r\n\t)\r\n}\r\n\r\nexport default CardsList;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Backdrop, TextField, Dialog, DialogContent, DialogTitle, DialogActions, Button } from '@material-ui/core';\r\nimport { toggleModal, setActiveCard, updateButton } from '../../redux/actions/cardActions';\r\n\r\nconst EditModal = () => {\r\n\r\n\tconst openModal = useSelector(state => state.cardReducer.openModal);\r\n\tconst activeCard = useSelector(state => state.cardReducer.activeCard);\r\n\r\n\tconst whatList = (state) => {\r\n\t\tif (activeCard.listName === 'active')\r\n\t\t\treturn state.cardReducer.activeCardsList[activeCard.index]\r\n\t\telse if (activeCard.listName === 'completed')\r\n\t\t\treturn state.cardReducer.completedCardsList[activeCard.index]\r\n\t\telse return null;\r\n\t}\r\n\t\r\n\tlet theCardElementFromTheArray = useSelector(state => whatList(state));\r\n\r\n\tconst [updatedTitle, setUpdatedTitle] = useState('');\r\n\tconst [updatedContent, setUpdatedContent] = useState('');\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleCloseModal = () => {\r\n\t\tdispatch(toggleModal());\r\n\t\tdispatch(setActiveCard(''));\r\n\t};\r\n\r\n\tconst handleUpdate = () => {\r\n\r\n\t\tdispatch(updateButton({\r\n\t\t\tindex: activeCard.index,\r\n\t\t\tstatus: activeCard.listName,\r\n\t\t\ttitle: updatedTitle,\r\n\t\t\tcontent: updatedContent\r\n\t\t}))\r\n\r\n\t\tsetUpdatedTitle('');\r\n\t\tsetUpdatedContent('');\r\n\r\n\t\thandleCloseModal();\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (theCardElementFromTheArray) {\r\n\t\t\tsetUpdatedTitle(theCardElementFromTheArray.title);\r\n\t\t\tsetUpdatedContent(theCardElementFromTheArray.content);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetUpdatedTitle('');\r\n\t\t\tsetUpdatedContent('');\r\n\t\t}\r\n\t},[theCardElementFromTheArray])\r\n\r\n\r\n\treturn (\r\n\t\t<Dialog\r\n\t\t\topen={openModal}\r\n\t\t\tonClose={handleCloseModal}\r\n\t\t\taria-labelledby=\"transition-modal-title\"\r\n\t\t\taria-describedby=\"transition-modal-description\"\r\n\t\t\tcloseAfterTransition\r\n\t\t\tBackdropComponent={Backdrop}\r\n\t\t\tBackdropProps={{ timeout: 500, }}\r\n\t\t>\r\n\t\t\t<DialogTitle id=\"form-dialog-title\">Edit Note</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<TextField id='standard-basic' label='Title' margin='normal' value={updatedTitle} onChange={event => { setUpdatedTitle(event.target.value) }} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tid=\"outlined-multiline-static\"\r\n\t\t\t\t\t\tlabel=\"Content\"\r\n\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\trows={4}\r\n\t\t\t\t\t\tvalue={updatedContent}\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\tonChange={event => { setUpdatedContent(event.target.value) }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t\t<Button onClick={handleUpdate} color=\"primary\" >Update</Button>\r\n\t\t\t\t<Button onClick={handleCloseModal} color=\"primary\">Close</Button>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t)\r\n}\r\n\r\nexport default EditModal","import { Container, Grid, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport CardCreator from './components/CardCreator/CardCreator';\nimport CardsList from './components/CardsList/CardsList';\nimport EditModal from './components/EditModal/EditModal';\n\nfunction App() {\n\n\tconst activeCardsList = useSelector(state => state.cardReducer.activeCardsList);\n\tconst completedCardsList = useSelector(state => state.cardReducer.completedCardsList);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<EditModal />\n\t\t\t<Container>\n\t\t\t\t<Grid container spacing={3} >\n\t\t\t\t\t<Grid item md sm={4} xs={12}>\n\t\t\t\t\t\t<Typography align='center' color='textPrimary' variant='button' display='block'>Add task:</Typography>\n\t\t\t\t\t\t<CardCreator />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item md sm={4} xs={12}>\n\t\t\t\t\t\t<Typography align='center' color='textPrimary' variant='h6'>Active tasks:</Typography>\n\t\t\t\t\t\t<CardsList cards={activeCardsList} listName='active' />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item md sm={4} xs={12}>\n\t\t\t\t\t\t<Typography align='center' color='textPrimary' variant='h6'>Completed tasks:</Typography>\n\t\t\t\t\t\t<CardsList cards={completedCardsList} listName='completed' />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initState = {\r\n\tactiveCardsList: [],\r\n\tcompletedCardsList: [],\r\n\topenModal: false,\r\n\tactiveCard: { index: '', listName: '' }\r\n}\r\n\r\nconst cardReducer = (state = initState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase actionTypes.ADD_CARD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tactiveCardsList: [...state.activeCardsList,\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: action.payload.title,\r\n\t\t\t\t\tcontent: action.payload.content,\r\n\t\t\t\t\tstatus: 'active'\r\n\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\tcase actionTypes.TOGGLE_MODAL:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\topenModal: !state.openModal\r\n\t\t\t}\r\n\t\tcase actionTypes.ACTIVE_CARD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tactiveCard: {\r\n\t\t\t\t\t...state.activeCard,\r\n\t\t\t\t\tindex: action.payload.index,\r\n\t\t\t\t\tlistName: action.payload.listName\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\tcase actionTypes.COMPLETED_BUTTON:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcompletedCardsList: [\r\n\t\t\t\t\t...state.completedCardsList,\r\n\t\t\t\t\tstate.activeCardsList[action.payload.index]\r\n\t\t\t\t],\r\n\t\t\t\tactiveCardsList: [\r\n\t\t\t\t\t...state.activeCardsList.slice(0, action.payload.index),\r\n\t\t\t\t\t...state.activeCardsList.slice(action.payload.index + 1)\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\tcase actionTypes.UNDO_COMPLETED_BUTTON:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tactiveCardsList: [\r\n\t\t\t\t\t...state.activeCardsList,\r\n\t\t\t\t\tstate.completedCardsList[action.payload.index]\r\n\t\t\t\t],\r\n\t\t\t\tcompletedCardsList: [\r\n\t\t\t\t\t...state.completedCardsList.slice(0, action.payload.index),\r\n\t\t\t\t\t...state.completedCardsList.slice(action.payload.index + 1)\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\tcase actionTypes.EDIT_BUTTON:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tactiveCard: action.payload,\r\n\t\t\t\topenModal: !state.openModal\r\n\t\t\t}\r\n\t\tcase actionTypes.UPDATE_BUTTON:\r\n\t\t\tif (action.payload.status === 'active')\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tactiveCardsList: state.activeCardsList.map((card, index) => {\r\n\t\t\t\t\t\tif (index === action.payload.index) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t...card,\r\n\t\t\t\t\t\t\t\ttitle: action.payload.title,\r\n\t\t\t\t\t\t\t\tcontent: action.payload.content\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn card;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\telse if (action.payload.status === 'completed')\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcompletedCardsList: state.completedCardsList.map((card, index) => {\r\n\t\t\t\t\t\tif (index === action.payload.index) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t...card,\r\n\t\t\t\t\t\t\t\ttitle: action.payload.title,\r\n\t\t\t\t\t\t\t\tcontent: action.payload.content\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn card;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state\r\n\t\t\t\t}\r\n\t\tcase actionTypes.DELETE_BUTTON:\r\n\t\t\tif (action.payload.listName === 'active' && state.activeCardsList.length > -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tactiveCardsList: [\r\n\t\t\t\t\t\t...state.activeCardsList.slice(0, action.payload.index),\r\n\t\t\t\t\t\t...state.activeCardsList.slice(action.payload.index + 1)\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (action.payload.listName === 'completed' && state.completedCardsList.length > -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcompletedCardsList: [\r\n\t\t\t\t\t\t...state.completedCardsList.slice(0, action.payload.index),\r\n\t\t\t\t\t\t...state.completedCardsList.slice(action.payload.index + 1)\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse return state;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default cardReducer;","import { combineReducers } from \"redux\";\r\nimport cardReducer from \"./cardReducer\";\r\n\r\nexport default combineReducers({ cardReducer });\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(\r\n\trootReducer, composeWithDevTools(\r\n\t\tapplyMiddleware(thunk)\r\n\t)\r\n)\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}